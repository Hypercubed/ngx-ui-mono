import { OnInit, Renderer, EventEmitter, AfterViewInit, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import 'codemirror/mode/yaml/yaml.js';
import 'codemirror/mode/python/python.js';
import 'codemirror/mode/powershell/powershell.js';
import 'codemirror/mode/javascript/javascript.js';
import 'codemirror/mode/htmlmixed/htmlmixed.js';
import 'codemirror/mode/spreadsheet/spreadsheet.js';
import 'codemirror/addon/lint/lint.js';
import 'codemirror/addon/search/search.js';
import 'codemirror/addon/search/searchcursor.js';
import 'codemirror/addon/search/jump-to-line.js';
import 'codemirror/addon/dialog/dialog.js';
import 'codemirror/addon/fold/foldcode.js';
import 'codemirror/addon/fold/foldgutter.js';
import 'codemirror/addon/fold/indent-fold.js';
export declare class CodeEditorComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {
    private renderer;
    config: any;
    theme: string;
    readOnly: any;
    mode: any;
    autofocus: boolean;
    lint: any;
    allowDropFileTypes: any[];
    lineNumbers: any;
    gutters: any[];
    value: string;
    change: EventEmitter<any>;
    blur: EventEmitter<any>;
    host: any;
    content: any;
    editor: any;
    instance: any;
    _value: string;
    constructor(renderer: Renderer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    cleanCode(code: string): string;
    onVisible(): void;
    updateValue(value: any): void;
    writeValue(val: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private onTouchedCallback;
    private onChangeCallback;
}
