import { EventEmitter, OnInit, ElementRef, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor, NgModel } from '@angular/forms';
import { InputTypes } from './input-types';
export declare class InputComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private cd;
    id: string;
    name: string;
    label: string;
    type: InputTypes;
    hint: string;
    placeholder: string;
    disabled: boolean;
    tabindex: number;
    min: number;
    max: number;
    minlength: number;
    maxlength: number;
    required: boolean;
    requiredIndicator: string | boolean;
    passwordToggleEnabled: boolean;
    passwordTextVisible: boolean;
    autoSelect: boolean;
    autofocus: boolean;
    autocomplete: boolean;
    autocorrect: boolean;
    spellcheck: boolean;
    change: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    keyup: EventEmitter<{}>;
    click: EventEmitter<{}>;
    value: string;
    readonly focusedOrDirty: any;
    readonly getHostCssClasses: string;
    readonly isInvalid: boolean;
    readonly isValid: boolean;
    readonly isTouched: boolean;
    readonly getCssClasses: any;
    inputModel: NgModel;
    inputControl: ElementRef;
    textareaControl: ElementRef;
    passwordControl: ElementRef;
    readonly labelState: string;
    readonly underlineState: string;
    readonly requiredIndicatorView: string;
    readonly element: any;
    focused: boolean;
    _value: string;
    constructor(cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onChange(event: any): void;
    onKeyUp(event: any): void;
    onFocus(event: any): void;
    onBlur(event: any): void;
    writeValue(val: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    togglePassword(): void;
    private onTouchedCallback;
    private onChangeCallback;
}
